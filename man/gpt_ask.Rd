% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/chatgpt.R
\name{gpt_ask}
\alias{gpt_ask}
\alias{gpt_classify}
\alias{gpt_tag}
\alias{gpt_extract}
\alias{gpt_format}
\alias{gpt_convert}
\alias{gpt_table}
\alias{gpt_translate}
\title{ChatGPT API Interaction with R}
\usage{
gpt_ask(
  ask,
  secret_key = get_credentials()$openai$secret_key,
  url = "https://api.openai.com/v1/chat/completions",
  model = "gpt-3.5-turbo",
  quiet = FALSE,
  ...
)

gpt_classify(x, categories, quiet = TRUE, ...)

gpt_tag(x, tags, quiet = TRUE, ...)

gpt_extract(x, extract, quiet = TRUE, ...)

gpt_format(x, format, quiet = TRUE, ...)

gpt_convert(x, unit, quiet = TRUE, ...)

gpt_table(ask, quiet = TRUE, ...)

gpt_translate(x, language, quiet = TRUE, ...)
}
\arguments{
\item{ask}{Character. Redacted prompt to ask ChatGPT. If multiple asks are
requested, they will be concatenated with "+" into a single request.}

\item{secret_key}{Character. Secret Key. Get yours in:
\href{https://platform.openai.com}{platform.openai.com}.}

\item{url}{Character. Base URL for OpenAI's ChatGPT API.}

\item{model}{Character. OpenAI model to use.}

\item{quiet}{Boolean. Keep quiet? If not, show informative messages.}

\item{...}{Additional parameters.}

\item{x}{Vector. List items you wish to process}

\item{categories, tags}{Vector. List of possible categories/tags to consider.}

\item{extract, format, unit}{Character. Length 1 or same as x to extract/format/unit
information from x. For example: email, country of phone number, country, amount as number,
currency ISO code, ISO, Fahrenheit, etc.}

\item{language}{Character. Language to translate to}
}
\value{
(Invisible) list. Content returned from API POST and processed.
}
\description{
This function lets the user ask ChatGPT via its API, and returns
the rendered reply.
}
\examples{
\dontrun{
api_key <- get_credentials()$openai$secret_key
# Open question:
gpt_ask("Can you write an R function to plot a dummy histogram?", api_key)

##### The following examples return dataframes:
# Classify each element based on categories:
gpt_classify(1:10, c("odd", "even"))

# Add all tags that apply to each element based on tags:
gpt_tag(
  c("I love chocolate", "I hate chocolate", "I like Coke"),
  c("food", "positive", "negative", "beverage"))

# Extract specific information:
gpt_extract(
  c("My mail is 123@test.com", "30 Main Street, Brooklyn, NY, USA", "+82 2-312-3456", "$1.5M"),
  c("email", "full state name", "country of phone number", "amount as number"))

# Format values
gpt_format(
  c("March 27th, 2021", "12-25-2023 3:45PM", "01.01.2000", "29 Feb 92"),
  format = "ISO Date getting rid of timestamps")
  
# Convert units
gpt_convert(c("50C", "300K"), "Fahrenheit")
  
# Create a table with data
gpt_table("5 random people's address in South America, email, phone, age between 18-30")

# Translate text to any language
gpt_translate(
  rep("I love you with all my heart", 5),
  language = c("spanish", "chinese", "japanese", "russian", "german"))
}
}
\seealso{
Other API: 
\code{\link{bring_api}()},
\code{\link{fb_accounts}()},
\code{\link{fb_ads}()},
\code{\link{fb_creatives}()},
\code{\link{fb_insights}()},
\code{\link{fb_process}()},
\code{\link{fb_report_check}()},
\code{\link{fb_rf}()},
\code{\link{fb_token}()},
\code{\link{li_auth}()},
\code{\link{li_profile}()},
\code{\link{queryGA}()},
\code{\link{slackSend}()}
}
\concept{API}
